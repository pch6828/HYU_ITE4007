import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

def normalize_vector(v):
    return v/np.dot(v, v)

def construct_API_list():
    print("construct API list...")
    API_list = {}
    cnt = 0
    for filename in os.listdir('API/0/'):
        file = open('API/0/'+filename)
        while True:
            line = file.readline()
            if line == "":
                break
            if not (line in API_list):
                API_list[line] = cnt
                cnt += 1
    for filename in os.listdir('API/1/'):
        file = open('API/1/'+filename)
        while True:
            line = file.readline()
            if line == "":
                break
            if not (line in API_list):
                API_list[line] = cnt
                cnt += 1
    print("construct API list complete")
    return API_list, cnt

def load_data(API_list, cnt):
    print("load API sequence data...")
    data = []
    label = []
    print("\tconstruct frequency vector #goodware")
    for filename in os.listdir('API/0/'):
        file = open('API/0/'+filename)
        row = np.zeros((cnt,))
        while True:
            line = file.readline()
            if line == "":
                break
            row[API_list[line]] += 1
        data.append(normalize_vector(np.array(row)))
        label.append(0)
    print("\tconstruct frequency vector #malware")
    for filename in os.listdir('API/1/'):
        file = open('API/1/'+filename)
        row = np.zeros((cnt,))
        while True:
            line = file.readline()
            if line == "":
                break
            row[API_list[line]] += 1
        data.append(normalize_vector(np.array(row)))
        label.append(1)

    print("\tsplit data for training and test")
    train_data, test_data, train_label, test_label = train_test_split(data, label, test_size=0.1, random_state=42)
    print("load API sequence data complete")
    return train_data, train_label, test_data, test_label

def load_single_data(API_list, cnt, filename):
    file = None
    try:
        file = open(filename)
    except FileNotFoundError:
        print("Wrong File!")
        return None
    
    data = []
    row = np.zeros((cnt,))
    while True:
        line = file.readline()
        if line == "":
            break
        row[API_list[line]] += 1
    data.append(normalize_vector(np.array(row)))
    
    return data

def main():
    API_list, cnt = construct_API_list()
    train_data, train_label, test_data, test_label = load_data(API_list, cnt)
    print("supervised learning...")
    classifier = KNeighborsClassifier(n_neighbors = 10)
    classifier.fit(train_data, train_label)
    print("supervised learning complete")
    print()
    print("accuracy : %f" % classifier.score(test_data, test_label))
    print()
    print("manual test")
    while(True):
        filename = input("input filename, or \"quit\" to stop test > ")
        if filename == "quit":
            break

        data = load_single_data(API_list, cnt, filename)
        if data != None:
            print("predicted : %s" % str(classifier.predict(data)))
if __name__ == "__main__":
    main()
